@page "/purchaseorders/create"
@inject ETPrintshopWeb.Data.ApplicationDbContext DB
@using ETPrintshopWeb.Data
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>PurchaseOrder</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="PurchaseOrder" OnValidSubmit="AddPurchaseOrder" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputText id="status" @bind-Value="PurchaseOrder.Status" class="form-control" /> 
                <ValidationMessage For="() => PurchaseOrder.Status" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="PurchaseOrder.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => PurchaseOrder.DateCreated" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/purchaseorders">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public PurchaseOrder PurchaseOrder { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddPurchaseOrder()
    {
        DB.PurchaseOrders.Add(PurchaseOrder);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/purchaseorders");
    }
}

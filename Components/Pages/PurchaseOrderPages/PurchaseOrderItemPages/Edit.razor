@page "/PurchaseOrderItems/edit"
@inject ETPrintshopWeb.Data.ApplicationDbContext DB
@using ETPrintshopWeb.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>PurchaseOrderItem</h4>
<hr />
@if (PurchaseOrderItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="PurchaseOrderItem" OnValidSubmit="UpdatePurchaseOrderItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="PurchaseOrderItem.Id" value="@PurchaseOrderItem.Id" />
                <div class="mb-3">
                    <label for="item" class="form-label">Item:</label>
                    <InputText id="item" @bind-Value="PurchaseOrderItem.Item" class="form-control" />
                    <ValidationMessage For="() => PurchaseOrderItem.Item" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity:</label>
                    <InputNumber id="quantity" @bind-Value="PurchaseOrderItem.Quantity" class="form-control" />
                    <ValidationMessage For="() => PurchaseOrderItem.Quantity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unit" class="form-label">Unit:</label>
                    <InputText id="unit" @bind-Value="PurchaseOrderItem.Unit" class="form-control" />
                    <ValidationMessage For="() => PurchaseOrderItem.Unit" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="PurchaseOrderItem.Price" class="form-control" />
                    <ValidationMessage For="() => PurchaseOrderItem.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="PurchaseOrderItem.Description" class="form-control" />
                    <ValidationMessage For="() => PurchaseOrderItem.Description" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/purchaseorderitems">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    public PurchaseOrderItem? PurchaseOrderItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PurchaseOrderItem ??= await DB.PurchaseOrderItems.FirstOrDefaultAsync(m => m.Id == Id);

        if (PurchaseOrderItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdatePurchaseOrderItem()
    {
        DB.Attach(PurchaseOrderItem!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PurchaseOrderItemExists(PurchaseOrderItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/purchaseorderitems");
    }

    bool PurchaseOrderItemExists(int? id)
    {
        return DB.PurchaseOrderItems.Any(e => e.Id == id);
    }
}

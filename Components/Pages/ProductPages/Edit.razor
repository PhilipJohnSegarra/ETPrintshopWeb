@page "/Products/edit"
@inject ETPrintshopWeb.Data.ApplicationDbContext DB
@using ETPrintshopWeb.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<div>
    <a class="btn btn-outline-dark" href="/products">Back</a>
</div>
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="container-fluid p-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance style="width:800px;background-color:white;padding:1rem;border-radius:10px;">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Product.Id" value="@Product.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputText id="category" @bind-Value="Product.Category" class="form-control" />
                    <ValidationMessage For="() => Product.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="brandname" class="form-label">BrandName:</label>
                    <InputText id="brandname" @bind-Value="Product.BrandName" class="form-control" />
                    <ValidationMessage For="() => Product.BrandName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="model" class="form-label">Model:</label>
                    <InputText id="model" @bind-Value="Product.Model" class="form-control" />
                    <ValidationMessage For="() => Product.Model" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="stocks" class="form-label">Stocks:</label>
                    <InputNumber id="stocks" @bind-Value="Product.Stocks" class="form-control" />
                    <ValidationMessage For="() => Product.Stocks" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                    <ValidationMessage For="() => Product.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="supplier" class="form-label">Supplier:</label>
                    <InputSelect id="supplier" class="form-control" @bind-Value="Product.SupplierId">
                        <option value="">
                            Select Supplier
                        </option>
                        @foreach (var supp in Suppliers)
                        {
                            <option value="@supp.Id">
                                @supp.Name
                            </option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Product.Supplier" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}



@code {
    [SupplyParameterFromQuery]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    public Product? Product { get; set; }

    List<Supplier> Suppliers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Product ??= await DB.Products.FirstOrDefaultAsync(m => m.Id == Id);
        Suppliers = DB.Suppliers.ToList();

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProduct()
    {
        DB.Attach(Product!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    bool ProductExists(int? id)
    {
        return DB.Products.Any(e => e.Id == id);
    }
}

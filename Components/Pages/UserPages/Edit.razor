@page "/users/edit/id={Id}"
@inject ETPrintshopWeb.Data.ApplicationDbContext DB
@using ETPrintshopWeb.Data
@using ETPrintshopWeb.Components.Account
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>Edit</PageTitle>

@if(user == null)
{
    <p>Please wait</p>
}
else
{
    <div class="container-fluid d-flex flex-row justify-content-end">

    </div>
    <div class="" style="width:100%;">
        <EditForm Model="user" method="post" OnValidSubmit="UpdateUser" FormName="register" style="width:100%;">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            @* @if (user.Id != "")
        {
        <p>@user.UserName</p>

        }
        else
        {
        <div class="Register-inputbox" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
        <InputText @bind-Value="user.UserName" class="Register-inputUsername" autocomplete="username" aria-required="true" placeholder="Enter Username" style="padding:9px; border-radius:6px;margin:0 0 8px 0;width:100%;max-width:500px;" />
        </div>
        } *@
            <div class="Register-inputbox mb-3" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
                
                <InputFile OnChange="LoadFiles" multiple />
                <img style="width:120px;height:120px;object-fit:cover;border-radius:50%;" class="img-fluid" src="@user.ImagePath" />
            </div>
            <div class="Register-inputbox" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
                <label>Fullname</label>
                <InputText @bind-Value="user.Fullname" class="Register-inputEmail" aria-required="true" placeholder="Enter Fullname" style="padding:9px; border-radius:6px;margin:0 0 8px 0;width:100%;max-width:500px;" />
            </div>
            <div class="Register-inputbox" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
                <label>Email</label>
                <InputText @bind-Value="user.Email" class="Register-inputEmail" autocomplete="email" aria-required="true" placeholder="Enter email" style="padding:9px; border-radius:6px;margin:0 0 8px 0;width:100%;max-width:500px;" />
            </div>
            <div class="Register-inputbox" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
                <label>Password</label>
                <InputText type="password" @bind-Value="user.PasswordHash" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter password" style="padding:9px; border-radius:6px;margin:0 0 8px 0;width:100%;max-width:500px;" />
            </div>
            <div class="Register-inputbox" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
                <label>Contact Number</label>
                <InputText type="text" @bind-Value="user.ContactNumber" class="form-control" aria-required="true" placeholder="Enter Contact Number" style="padding:9px; border-radius:6px;margin:0 0 8px 0;width:100%;max-width:500px;" />
            </div>
            <div class="Register-inputbox" style="width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;">
                <label>Address</label>
                <InputTextArea type="text" @bind-Value="user.Address" class="form-control" aria-required="true" placeholder="Enter Address" style="padding:9px; border-radius:6px;margin:0 0 8px 0;width:100%;max-width:500px;" />
            </div>
            <div style="display:flex;flex-direction:row;justify-content:end;align-items:center;margin:1rem 0 0 0;">
                <button type="submit" class="btn-register" style="background-color:#2342c0;padding:8px 2rem;border:none;border-radius:6px;color:white;cursor:pointer;">Save</button>
            </div>


        </EditForm>


    </div>
}


@code{
    [Parameter]
    public string? Id { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [Parameter]
    public ApplicationUser? user { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        user = await DB.Users.SingleAsync(i => i.Id == Id);
    }

    public async Task UpdateUser()
    {
        DB.Users.Update(user);

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (user == null)
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }
    //File Upload
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 5;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileExtension = Path.GetExtension(file.Name);
                var allowedExtensions = new List<string> { ".jpg", ".jpeg", ".png", ".gif" };
                if (!allowedExtensions.Contains(fileExtension.ToLower()))
                {
                    throw new InvalidOperationException("Unsupported file type.");
                }

                var trustedFileName = Path.GetRandomFileName() + fileExtension;
                var path = Path.Combine(Environment.WebRootPath, "uploads", trustedFileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                var relativePath = Path.Combine("uploads", trustedFileName);
                user.ImagePath = relativePath; // Store the relative path for use in the UI

                Logger.LogInformation(
                    "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
                    file.Name, trustedFileName);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}


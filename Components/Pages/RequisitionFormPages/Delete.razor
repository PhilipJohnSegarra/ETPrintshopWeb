@page "/requisitionforms/delete"
@inject ETPrintshopWeb.Data.ApplicationDbContext DB
@using ETPrintshopWeb.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>RequisitionForm</h4>
    <hr />
    @if (requisitionform is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">JONumber</dt>
            <dd class="col-sm-10">@requisitionform.JONumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateRequested</dt>
            <dd class="col-sm-10">@requisitionform.DateRequested</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeliveryDate</dt>
            <dd class="col-sm-10">@requisitionform.DeliveryDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@requisitionform.Status</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReceivedBy</dt>
            <dd class="col-sm-10">@requisitionform.ReceivedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ApprovedBy</dt>
            <dd class="col-sm-10">@requisitionform.ApprovedBy</dd>
        </dl>
        <EditForm method="post" Model="requisitionform" OnValidSubmit="DeleteRequisitionForm" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(requisitionform is null)">Delete</button> |
            <a href="/requisitionforms">Back to List</a>
        </EditForm>
    }
</div>

@code {
    RequisitionForm? requisitionform;

    [SupplyParameterFromQuery]
    public int? Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        requisitionform = await DB.RequisitionForms.FirstOrDefaultAsync(m => m.Id == Id);

        if (requisitionform is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteRequisitionForm()
    {
        var items = DB.RequisitionItems.Where(i => i.RequisitionForm == requisitionform).ToList();
        if(items != null)
        {
            foreach (var item in items)
            {
                DB.RequisitionItems.Remove(item);
            }
        }
        DB.RequisitionForms.Remove(requisitionform!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/requisitionforms");
    }
}

@page "/Suppliers/edit"
@inject ETPrintshopWeb.Data.ApplicationDbContext DB
@using ETPrintshopWeb.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>
<div>
    <a class="btn btn-outline-dark" href="/suppliers">Back</a>
</div>
@if (Supplier is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="container-fluid p-4" style="overflow:auto;">
            <EditForm method="post" Model="Supplier" OnValidSubmit="UpdateSupplier" FormName="edit" Enhance style="width:800px;background-color:white;padding:1rem;border-radius:10px;">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Supplier.Id" value="@Supplier.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Supplier.Name" class="form-control" />
                    <ValidationMessage For="() => Supplier.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactperson" class="form-label">ContactPerson:</label>
                    <InputText id="contactperson" @bind-Value="Supplier.ContactPerson" class="form-control" />
                    <ValidationMessage For="() => Supplier.ContactPerson" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Supplier.Email" class="form-control" />
                    <ValidationMessage For="() => Supplier.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactnumber" class="form-label">ContactNumber:</label>
                    <InputText id="contactnumber" @bind-Value="Supplier.ContactNumber" class="form-control" />
                    <ValidationMessage For="() => Supplier.ContactNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Supplier.Address" class="form-control" />
                    <ValidationMessage For="() => Supplier.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="Supplier.Status" class="form-control" />
                    <ValidationMessage For="() => Supplier.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateadded" class="form-label">DateAdded:</label>
                    <InputDate id="dateadded" @bind-Value="Supplier.DateAdded" class="form-control" />
                    <ValidationMessage For="() => Supplier.DateAdded" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}



@code {
    [SupplyParameterFromQuery]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    public Supplier? Supplier { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Supplier ??= await DB.Suppliers.FirstOrDefaultAsync(m => m.Id == Id);

        if (Supplier is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSupplier()
    {
        DB.Attach(Supplier!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SupplierExists(Supplier!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/suppliers");
    }

    bool SupplierExists(int? id)
    {
        return DB.Suppliers.Any(e => e.Id == id);
    }
}
